# =======================
# Endpoint: /api/maintenance-companies/
# Method: GET
# Description: List all maintenance companies.
# This endpoint allows you to retrieve a list of all maintenance companies. Optionally, you can filter or paginate the results if needed.
# =======================
GET http://127.0.0.1:8000/api/maintenance-companies/

# Success Response - List of Maintenance Companies
HTTP/1.1 200 OK
[
    {
        "id": 1,
        "company_name": "ABC Elevators",
        "specialization": "Elevator Repair"
    },
    {
        "id": 2,
        "company_name": "XYZ Maintenance",
        "specialization": "General Maintenance"
    }
]

# Failure Response - No Companies Found
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance companies found."
}

# =======================
# Endpoint: /api/maintenance-companies/{specialization}/
# Method: GET
# Description: List all maintenance companies in a certain specialization.
# This endpoint allows you to retrieve a list of companies in a specific specialization.
# It returns the company ID and company name for each result.
# =======================
GET http://127.0.0.1:8000/api/maintenance-companies/elevator_repair/

# Success Response - List of Companies in a Specialization
HTTP/1.1 200 OK
[
    {
        "id": 1,
        "company_name": "ABC Elevators"
    },
    {
        "id": 3,
        "company_name": "Elevator Services Ltd."
    }
]

# Failure Response - No Companies Found in Specialization
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance companies found in this specialization."
}

# =======================
# Endpoint: /api/maintenance-companies/id/{company_id}/
# Method: GET
# Description: Get details of a specific maintenance company by its ID.
# This endpoint allows you to retrieve detailed information about a maintenance company by specifying its company_id.
# =======================
GET http://127.0.0.1:8000/api/maintenance-companies/id/1/

# Success Response - Maintenance Company Details
HTTP/1.1 200 OK
{
    "id": 1,
    "company_name": "ABC Elevators",
    "specialization": "Elevator Repair",
    "address": "123 Elevator St.",
    "contact_email": "contact@abcelevators.com"
}

# Failure Response - Company Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Maintenance company not found."
}

# =======================
# Endpoint: /api/maintenance-companies/email/{company_email}/
# Method: GET
# Description: Get details of a specific maintenance company based on the company email.
# This endpoint allows you to retrieve detailed information about a maintenance company by its email address.
# =======================
GET http://127.0.0.1:8000/api/maintenance-companies/email/contact@abcelevators.com/

# Success Response - Maintenance Company Details by Email
HTTP/1.1 200 OK
{
    "id": 1,
    "company_name": "ABC Elevators",
    "specialization": "Elevator Repair",
    "address": "123 Elevator St.",
    "contact_email": "contact@abcelevators.com"
}

# Failure Response - Company Not Found by Email
HTTP/1.1 404 Not Found
{
    "detail": "User with this email not found or no maintenance company associated."
}

# =======================
# Endpoint: /api/maintenance-companies/update/{company_id}/
# Method: PUT/PATCH
# Description: Update a maintenance company.
# This endpoint allows you to update the details of a maintenance company. Use PATCH for partial updates or PUT for full updates.
# =======================
PUT http://127.0.0.1:8000/api/maintenance-companies/update/1/

# Example Request Body (for PUT):
{
    "company_name": "ABC Elevators Ltd.",
    "specialization": "Elevator Maintenance",
    "address": "456 New Elevator St.",
    "contact_email": "info@abcelevators.com"
}

# Success Response - Maintenance Company Updated
HTTP/1.1 200 OK
{
    "message": "Maintenance company updated successfully."
}

# Failure Response - Company Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Maintenance company not found."
}

# =======================
# Endpoint: /api/maintenance-companies/{company_id}/technicians/
# Method: GET
# Description: List all technicians for a specific maintenance company.
# This endpoint allows you to retrieve a list of all technicians associated with a given maintenance company by specifying the company ID.
# =======================
GET http://127.0.0.1:8000/api/maintenance-companies/1/technicians/

# Success Response - List of Technicians for the Company
HTTP/1.1 200 OK
[
    {
        "id": 1,
        "technician_name": "John Doe",
        "specialization": "Elevator Repair"
    },
    {
        "id": 2,
        "technician_name": "Jane Smith",
        "specialization": "Elevator Maintenance"
    }
]

# Failure Response - No Technicians Found
HTTP/1.1 404 Not Found
{
    "detail": "No technicians found for this maintenance company."
}

# =======================
# Endpoint: /api/maintenance-companies/{company_id}/technicians/{technician_id}/
# Method: GET
# Description: Get details of a technician for a specific maintenance company.
# This endpoint allows you to retrieve the details of a specific technician assigned to a maintenance company.
# =======================
GET http://127.0.0.1:8000/api/maintenance-companies/1/technicians/1/

# Success Response - Technician Details
HTTP/1.1 200 OK
{
    "id": 1,
    "technician_name": "John Doe",
    "specialization": "Elevator Repair",
    "email": "johndoe@example.com"
}

# Failure Response - Technician Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Technician not found or not linked to this company."
}

# =======================
# Endpoint: /api/maintenance-companies/{company_id}/technicians/{technician_id}/remove/
# Method: DELETE
# Description: Remove a technician from a maintenance company.
# This endpoint allows you to remove a technician from a specific maintenance company by their technician ID.
# =======================
DELETE http://127.0.0.1:8000/api/maintenance-companies/1/technicians/1/remove/

# Success Response - Technician Removed from Company
HTTP/1.1 204 No Content
{
    "message": "Technician removed from the maintenance company."
}

# Failure Response - Technician Not Found or Not Linked
HTTP/1.1 404 Not Found
{
    "detail": "Technician not found or not linked to this company."
}

# =======================
# Endpoint: /api/maintenance-companies/{company_id}/technicians/{technician_id}/add/
# Method: POST
# Description: Add a technician to a maintenance company.
# This endpoint allows you to assign a technician to a maintenance company. The technician should not already be linked to another company.
# =======================
POST http://127.0.0.1:8000/api/maintenance-companies/1/technicians/2/add/

# Success Response - Technician Added to Company
HTTP/1.1 200 OK
{
    "message": "Technician added to the maintenance company successfully."
}

# Failure Response - Technician Already Linked to Another Company
HTTP/1.1 400 Bad Request
{
    "error": "Technician is already linked to another maintenance company."
}

# Failure Response - Technician Specialization Does Not Match Company
HTTP/1.1 400 Bad Request
{
    "error": "Technician's specialization does not match the company's specialization."
}

# Failure Response - Technician Not Found
HTTP/1.1 404 Not Found
{
    "error": "Technician not found."
}

# ===========================
# Test: List all buildings under a specific maintenance company
# ===========================

### Success Case: List buildings under a valid company
# Expected: A list of buildings under company with id 1.
GET http://localhost:8000/api/maintenance-companies/1/buildings/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# [
#   {
#     "id": 1,
#     "name": "Sundowners Towers",
#     "address": "123 Sunset Boulevard, Los Angeles, CA",
#     "contact": "555-12544",
#     "developer": {
#       "id": 1,
#       "developer_name": "Alice Tech Solutions"
#     }
#   }
# ]

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating company with id 999999 does not exist.
GET http://localhost:8000/api/maintenance-companies/999999/buildings/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: No buildings found under the company
# Expected: Empty list indicating no buildings for company with id 2.
GET http://localhost:8000/api/maintenance-companies/2/buildings/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# []

# ===========================
# Test: Get details of a specific building under a maintenance company
# ===========================

### Success Case: Retrieve building details by valid building ID
# Expected: The building details for building with id 1 under company 1.
GET http://localhost:8000/api/maintenance-companies/1/buildings/1/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# {
#   "id": 1,
#   "name": "Sundowners Towers",
#   "address": "123 Sunset Boulevard, Los Angeles, CA",
#   "contact": "555-12544",
#   "developer": {
#     "id": 1,
#     "developer_name": "Alice Tech Solutions"
#   }
# }

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating that maintenance company with id 999999 is not found.
GET http://localhost:8000/api/maintenance-companies/999999/buildings/1/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: Building not found under the company
# Expected: Error response indicating building with id 999999 doesn't exist under company 1.
GET http://localhost:8000/api/maintenance-companies/1/buildings/999999/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Building not found under the specified maintenance company."
# }

### Failure Case 3: Building not linked to the specified maintenance company
# Expected: Error response indicating building with id 1 is not linked to company 2.
GET http://localhost:8000/api/maintenance-companies/2/buildings/1/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Building not linked to the specified maintenance company."
# }

# ===========================
# Test: List all elevators under a specific maintenance company
# ===========================

### Success Case: List elevators under a valid company
# Expected: A list of elevators under maintenance company with id 1.
GET http://localhost:8000/api/maintenance-companies/1/elevators/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# [
#   {
#     "id": 1,
#     "user_name": "Lift A",
#     "capacity": 1000,
#     "manufacturer": "ElevatorCo",
#     "installation_date": "2020-01-01",
#     "building": {
#       "id": 1,
#       "name": "Sundowners Towers"
#     },
#     "developer": {
#       "id": 1,
#       "developer_name": "Alice Tech Solutions"
#     }
#   }
# ]

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating that maintenance company with id 999999 does not exist.
GET http://localhost:8000/api/maintenance-companies/999999/elevators/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: No elevators found under the company
# Expected: Empty list indicating no elevators for company with id 2.
GET http://localhost:8000/api/maintenance-companies/2/elevators/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# []

# ===========================
# Test: List all elevators in a specific building under a maintenance company
# ===========================

### Success Case: List elevators under a valid company and building
# Expected: A list of elevators in the building with id 1 under maintenance company 1.
GET http://localhost:8000/api/maintenance-companies/1/buildings/1/elevators/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# [
#   {
#     "id": 1,
#     "user_name": "Lift A",
#     "capacity": 1000,
#     "manufacturer": "ElevatorCo",
#     "installation_date": "2020-01-01"
#   }
# ]

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating that maintenance company with id 999999 is not found.
GET http://localhost:8000/api/maintenance-companies/999999/buildings/1/elevators/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: Building not found under the company
# Expected: Error response indicating building with id 999999 doesn't exist under company 1.
GET http://localhost:8000/api/maintenance-companies/1/buildings/999999/elevators/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Building not found under the specified maintenance company."
# }

### Failure Case 3: No elevators found in the building
# Expected: A response indicating that no elevators are found in the building with id 2 under company 1.
GET http://localhost:8000/api/maintenance-companies/1/buildings/2/elevators/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# []

# ===========================
# Test: Get details of a specific elevator under a maintenance company
# ===========================

### Success Case: Retrieve elevator details by valid elevator ID
# Expected: Elevator details for elevator with id 1 under maintenance company 1.
GET http://localhost:8000/api/maintenance-companies/1/elevators/1/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# {
#   "id": 1,
#   "user_name": "Lift A",
#   "capacity": 1000,
#   "manufacturer": "ElevatorCo",
#   "installation_date": "2020-01-01",
#   "building": {
#     "id": 1,
#     "name": "Sundowners Towers"
#   },
#   "developer": {
#     "id": 1,
#     "developer_name": "Alice Tech Solutions"
#   }
# }

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating maintenance company with id 999999 doesn't exist.
GET http://localhost:8000/api/maintenance-companies/999999/elevators/1/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: Elevator not found under the company
# Expected: Error response indicating elevator with id 999999 doesn't exist under maintenance company 1.
GET http://localhost:8000/api/maintenance-companies/1/elevators/999999/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Elevator not found or not linked to the specified maintenance company."
# }

### Failure Case 3: Elevator not linked to the specified maintenance company
# Expected: Error response indicating elevator with id 1 is not linked to company 2.
GET http://localhost:8000/api/maintenance-companies/2/elevators/1/ HTTP/1.1
Accept: application/json

# Expected Output (Error):
# {
#   "error": "Elevator not linked to the specified maintenance company."
# }

### Success Case: Retrieve elevator details by valid machine number
# Expected: Elevator details for the elevator with machine number "LIFT1" under maintenance company with ID 1.
GET http://localhost:8000/api/maintenance-companies/1/elevators/LIFT1/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# HTTP/1.1 200 OK
# Content-Type: application/json
# 
# {
#   "user_name": "LIFT1",
#   "controller_type": "Digital",
#   "machine_type": "gearless",
#   "building": {
#     "id": 1,
#     "name": "Sundowners Towers",
#     "address": "123 Sunset Boulevard, Los Angeles, CA",
#     "contact": "555-12544",
#     "developer": {
#       "id": 1,
#       "developer_name": "Alice Tech Solutions"
#     }
#   },
#   "capacity": 1000,
#   "manufacturer": "ElevatorCo",
#   "installation_date": "2023-01-01",
#   "maintenance_company": {
#     "id": 1,
#     "name": "Maintenance Co"
#   }
# }

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating the maintenance company with ID 999999 doesn't exist.
GET http://localhost:8000/api/maintenance-companies/999999/elevators/LIFT1/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# HTTP/1.1 404 Not Found
# Content-Type: application/json
#
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: Elevator with specified machine number not found under the maintenance company
# Expected: Error response indicating no elevator with machine number "LIFT1000" exists under the maintenance company with ID 1.
GET http://localhost:8000/api/maintenance-companies/1/elevators/LIFT1000/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# HTTP/1.1 404 Not Found
# Content-Type: application/json
#
# {
#   "error": "Elevator with the specified machine number not found under this maintenance company."
# }

### Failure Case 3: Elevator exists, but machine number does not match
# Expected: Error response indicating that the elevator with machine number "LIFT1" exists, but it is linked to a different maintenance company.
GET http://localhost:8000/api/maintenance-companies/2/elevators/LIFT1/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# HTTP/1.1 404 Not Found
# Content-Type: application/json
#
# {
#   "error": "Elevator with the specified machine number not found under this maintenance company."
# }

### Failure Case 4: Invalid Machine Number Format
# Expected: Error response for an invalid machine number format (e.g., numeric values or special characters that don't exist).
GET http://localhost:8000/api/maintenance-companies/1/elevators/12345/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# HTTP/1.1 404 Not Found
# Content-Type: application/json
#
# {
#   "error": "Elevator with the specified machine number not found under this maintenance company."
# }

### Failure Case 5: Unexpected Error (Example - Server Error)
# Expected: A generic error indicating an internal server error due to some unexpected failure (e.g., database issues).
GET http://localhost:8000/api/maintenance-companies/1/elevators/LIFT1/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# HTTP/1.1 500 Internal Server Error
# Content-Type: application/json
#
# {
#   "error": "An unexpected error occurred. Please try again later."
# }

### Success Case: Retrieve developers under a valid maintenance company
# Expected: A list of developers associated with buildings managed by elevators under maintenance company with id 1.
GET http://localhost:8000/api/maintenance-companies/1/developers/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# [
#   {
#     "id": 1,
#     "developer_name": "Alice Tech Solutions",
#     "developer_profile": "profile-info",
#     "buildings": [
#       {
#         "id": 1,
#         "name": "Sundowners Towers"
#       }
#     ]
#   }
# ]

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating maintenance company with id 999999 doesn't exist.
GET http://localhost:8000/api/maintenance-companies/999999/developers/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: No developers associated with the given maintenance company
# Expected: A message indicating no developers found under the specified maintenance company.
GET http://localhost:8000/api/maintenance-companies/2/developers/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "message": "No developers found under this maintenance company."
# }

### Failure Case 3: Elevator not found for the given maintenance company
# Expected: Error response indicating no elevators found for maintenance company 3.
GET http://localhost:8000/api/maintenance-companies/3/developers/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "error": "No elevators found for the specified maintenance company."
# }

### Failure Case 4: Internal Server Error (Unexpected error)
# This case tests a generic error that might occur during the processing (such as a database issue).
# In production, this error should be handled, but for testing, you may trigger it by modifying data or setting up invalid data.
GET http://localhost:8000/api/maintenance-companies/1/developers/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "error": "An unexpected error occurred. Please try again later."
# }


### Success Case: Retrieve developer details by valid company ID and developer ID
# Expected: Developer details for developer with id 1 under maintenance company 1.
GET http://localhost:8000/api/maintenance-companies/1/developers/1/ HTTP/1.1
Accept: application/json

# Expected Output (Success):
# {
#   "id": 1,
#   "developer_name": "Alice Tech Solutions",
#   "developer_profile": "Profile details here",
#   "buildings": [
#     {
#       "id": 1,
#       "name": "Sundowners Towers"
#     }
#   ]
# }

### Failure Case 1: Maintenance company not found
# Expected: Error response indicating maintenance company with id 999999 doesn't exist.
GET http://localhost:8000/api/maintenance-companies/999999/developers/1/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "error": "Maintenance company not found."
# }

### Failure Case 2: Developer not found
# Expected: Error response indicating developer with id 999999 doesn't exist.
GET http://localhost:8000/api/maintenance-companies/1/developers/999999/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "error": "Developer not found."
# }

### Failure Case 3: Developer not linked to the maintenance company
# Expected: Error response indicating developer is not linked to any buildings under the specified maintenance company.
GET http://localhost:8000/api/maintenance-companies/1/developers/2/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "error": "Developer not found or not linked to any buildings under the specified maintenance company."
# }

### Failure Case 4: Internal server error (unexpected issue, e.g., database problem)
# Expected: Error response for unexpected issues like database failures.
GET http://localhost:8000/api/maintenance-companies/1/developers/1/ HTTP/1.1
Accept: application/json

# Expected Output (Failure):
# {
#   "error": "An unexpected error occurred. Please try again later."
# }
