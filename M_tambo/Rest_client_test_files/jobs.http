# =======================
# Endpoint: /api/jobs/maintenance-schedule/
# Method: GET
# Description: Lists all maintenance schedules.
# This endpoint allows you to retrieve a list of all maintenance schedules. You can use optional query parameters to filter the results, such as by technician, elevator, status, and scheduled date.
# =======================
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/

# Optional Query Parameters:
# - technician_id (optional): Filter by technician's ID.
# - elevator_id (optional): Filter by elevator's ID.
# - status (optional): Filter by maintenance status (e.g., "scheduled", "completed", "overdue").
# - scheduled_date (optional): Filter by the scheduled date of the maintenance.
# - next_schedule (optional): Filter by the frequency of the next scheduled maintenance (e.g., "1_month", "3_months").

# Example Request with Filters:
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/?technician_id=456&status=scheduled

# Success Response - List of All Maintenance Schedules
HTTP/1.1 200 OK
[
    {
        "id": 789,
        "elevator": 123,
        "technician": 456,
        "status": "scheduled",
        "scheduled_date": "2024-12-31",
        "next_schedule": "3_months"
    },
    {
        "id": 790,
        "elevator": 124,
        "technician": 457,
        "status": "completed",
        "scheduled_date": "2024-11-01",
        "next_schedule": "1_month"
    }
]

# Failure Response - No Maintenance Schedules Found
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance schedules found."
}

# Failure Response - Invalid Filter Parameters
HTTP/1.1 400 Bad Request
{
    "detail": "Invalid filter parameter: technician_id must be an integer."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/create/elevator/{elevator_id}/
# Method: POST
# Description: Creates a new maintenance schedule for a given elevator ID.
# This endpoint allows you to schedule a maintenance task for an elevator by providing necessary details like technician, scheduled date, and the maintenance frequency.
# =======================
POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/create/elevator/123/

Content-Type: application/json
{
    "technician": 456,  # ID of the technician (optional, if not provided, auto-assign from elevator's technician)
    "next_schedule": "1_month",  # "1_month", "3_months", or "6_months" (Optional, frequency of the next maintenance)
    "scheduled_date": "2024-12-31"  # The date when the maintenance is scheduled (Required)
}

# Success Response
HTTP/1.1 201 Created
{
    "message": "Maintenance schedule created successfully",
    "maintenance_schedule_id": 789
}

# Failure Response - Invalid Technician
HTTP/1.1 400 Bad Request
{
    "detail": "Technician with ID 456 does not exist."
}

# Failure Response - Elevator Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Elevator with ID 123 does not exist."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/{schedule_id}/update/
# Method: PUT
# Description: Updates the status of a given maintenance schedule.
# Use this endpoint to change the status of an existing maintenance schedule (e.g., from "scheduled" to "completed").
# =======================
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/789/update/

Content-Type: application/json
{
    "status": "completed",  # "completed", "overdue", or "scheduled" (Required)
    "next_schedule": "3_months"  # "1_month", "3_months", "6_months", or "set_date" (Optional)
}

# Success Response
HTTP/1.1 200 OK
{
    "id": 789,
    "status": "completed",
    "next_schedule": "3_months"
}

# Failure Response - Schedule Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Schedule not found."
}

# Failure Response - Invalid Status Update
HTTP/1.1 400 Bad Request
{
    "detail": "Cannot update to the same status."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/{schedule_id}/remove/
# Method: DELETE
# Description: Removes a specific maintenance schedule by ID.
# This endpoint allows you to delete an existing maintenance schedule.
# =======================
DELETE http://127.0.0.1:8000/api/jobs/maintenance-schedule/789/remove/

# Success Response
HTTP/1.1 204 No Content
{
    "detail": "Schedule deleted successfully."
}

# Failure Response - Schedule Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Schedule not found."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/technician/{technician_id}/
# Method: GET
# Description: List all maintenance schedules for a specific technician.
# Use this endpoint to get all maintenance schedules assigned to a specific technician.
# =======================
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/technician/456/

# Success Response
HTTP/1.1 200 OK
[
    {
        "id": 789,
        "elevator": 123,
        "status": "scheduled",
        "technician": 456,
        "scheduled_date": "2024-12-31"
    },
    {
        "id": 790,
        "elevator": 124,
        "status": "completed",
        "technician": 456,
        "scheduled_date": "2024-11-01"
    }
]

# Failure Response - Technician Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Technician not found."
}

# Failure Response - No Schedules for Technician
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance schedules found for this technician."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/elevator/{elevator_id}/
# Method: GET
# Description: List all maintenance schedules for a specific elevator.
# Use this endpoint to view all maintenance schedules assigned to a specific elevator.
# =======================
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/elevator/123/

# Success Response
HTTP/1.1 200 OK
[
    {
        "id": 789,
        "status": "scheduled",
        "technician": 456,
        "scheduled_date": "2024-12-31"
    }
]

# Failure Response - Elevator Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Elevator not found."
}

# Failure Response - No Schedules for Elevator
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance schedules found for this elevator."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/maintenance_company/{company_id}/
# Method: GET
# Description: List all maintenance schedules for a specific maintenance company.
# Use this endpoint to see all maintenance schedules linked to a particular maintenance company.
# =======================
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/1/

# Success Response
HTTP/1.1 200 OK
[
    {
        "id": 789,
        "status": "scheduled",
        "elevator": 123,
        "technician": 456,
        "scheduled_date": "2024-12-31"
    }
]

# Failure Response - Maintenance Company Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Maintenance company not found."
}

# Failure Response - No Schedules for Maintenance Company
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance schedules found for this maintenance company."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/developer/{developer_id}/
# Method: GET
# Description: List all maintenance schedules for a specific developer.
# Use this endpoint to retrieve all maintenance schedules for a particular developer.
# =======================
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/developer/123/

# Success Response
HTTP/1.1 200 OK
[
    {
        "id": 789,
        "status": "scheduled",
        "technician": 456,
        "scheduled_date": "2024-12-31",
        "elevator": 123
    }
]

# Failure Response - Developer Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Developer not found."
}

# Failure Response - No Schedules for Developer
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance schedules found for this developer."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/building/{building_id}/
# Method: GET
# Description: List all maintenance schedules for a specific building.
# Use this endpoint to view all maintenance schedules associated with a specific building.
# =======================
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/building/456/

# Success Response
HTTP/1.1 200 OK
[
    {
        "id": 789,
        "status": "scheduled",
        "technician": 456,
        "scheduled_date": "2024-12-31",
        "elevator": 123
    }
]

# Failure Response - Building Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Building not found."
}

# Failure Response - No Schedules for Building
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance schedules found for this building."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/change_technician/{schedule_id}/
# Method: PUT
# Description: Change the technician assigned to a specific maintenance schedule.
# This endpoint allows you to reassign a technician to an existing maintenance schedule.
# =======================
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/change_technician/789/

Content-Type: application/json
{
    "technician_id": 567  # ID of the new technician
}

# Success Response
HTTP/1.1 200 OK
{
    "message": "Technician has been changed to John Doe."
}

# Failure Response - Schedule Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Maintenance schedule not found."
}

# Failure Response - Technician Not Found
HTTP/1.1 404 Not Found
{
    "detail": "Technician with ID 567 does not exist."
}

# Failure Response - Completed Schedule
HTTP/1.1 400 Bad Request
{
    "detail": "You cannot reassign a completed schedule."
}


# =======================
# Endpoint: /api/jobs/maintenance-schedule/filter/
# Method: PUT
# Description: Filter and list all maintenance schedules based on provided filters.
# Use this endpoint to filter and retrieve maintenance schedules based on various criteria such as technician, developer, elevator, and others.
# =======================
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/filter/

Content-Type: application/json
{
    "technician_id": 456,  # Optional: Filter by technician
    "status": "scheduled",  # Optional: Filter by status
    "developer_id": 123,  # Optional: Filter by developer
    "elevator_id": 123,  # Optional: Filter by elevator
    "building_id": 456,  # Optional: Filter by building
    "scheduled_date": "2024-12-31",  # Optional: Filter by scheduled date
    "next_schedule": "1_month"  # Optional: Filter by next scheduled date
}

# Success Response
HTTP/1.1 200 OK
[
    {
        "id": 789,
        "status": "scheduled",
        "technician": 456,
        "scheduled_date": "2024-12-31"
    }
]

# Failure Response - Invalid Date Format
HTTP/1.1 400 Bad Request
{
    "detail": "Invalid date format. Please use YYYY-MM-DD."
}

# Failure Response - No Schedules Found
HTTP/1.1 404 Not Found
{
    "detail": "No maintenance schedules found matching the criteria."
}


### 1. Test for Schedule Already Completed
# This test checks if the schedule is already marked as 'completed'.
# The content is optional, and only the PUT request is required to check the status.

PUT http://localhost:8000/api/jobs/maintenance-schedule/1/completed/ HTTP/1.1

### 2. Test for Overdue Schedule - Quiet Update to Completed
# This test checks if the schedule is 'overdue' and is marked as 'completed' quietly without creating a new schedule.
# The content is optional, and only the PUT request is required to check the status.

PUT http://localhost:8000/api/jobs/maintenance-schedule/2/completed/ HTTP/1.1

### 3. Test for Scheduled Schedule - Change to Completed and Create New Schedule
# This test checks if the schedule is 'scheduled', marks it as 'completed', and triggers the creation of a new schedule.
# The content is optional, and only the PUT request is required to check the status.

PUT http://localhost:8000/api/jobs/maintenance-schedule/3/completed/ HTTP/1.1

### 4. Test for Non-existent Schedule
# This test checks the case when the provided schedule_id does not exist.
# The content is optional, and only the PUT request is required to check the status.

PUT http://localhost:8000/api/jobs/maintenance-schedule/9999/completed/ HTTP/1.1


### Scenario 1: Valid Request - Creating a maintenance schedule for today
POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/create/elevator/11/
Content-Type: application/json

{
    "next_schedule": "1_month",
    "scheduled_date": "2025-01-12",
    "description": "Monthly Maintenance"
}

###

### Scenario 2: Past Date - Trying to create a maintenance schedule with a past date (should fail)
POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/create/elevator/11/
Content-Type: application/json

{
    "next_schedule": "1_month",
    "scheduled_date": "2025-01-11",  # This is a past date
    "description": "Monthly Maintenance"
}

###

### Scenario 3: Missing Required Fields - Missing next_schedule, scheduled_date, or description
POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/create/elevator/11/
Content-Type: application/json

{
    "next_schedule": "1_month",
    "description": "Monthly Maintenance"
}

###

### Scenario 4: Invalid Date Format - Providing an invalid date format (should fail)
POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/create/elevator/11/
Content-Type: application/json

{
    "next_schedule": "1_month",
    "scheduled_date": "2025-12-12T25:00:00Z",  # Invalid time part (25:00:00 is not valid)
    "description": "Monthly Maintenance"
}

###

### Scenario 5: Providing Technician and Maintenance Company in Request - Should use elevator's values if provided values contradict
POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/create/elevator/11/
Content-Type: application/json

{
    "next_schedule": "1_month",
    "scheduled_date": "2025-01-12",
    "description": "Monthly Maintenance",
    "technician": 5,  # Invalid technician, as elevator has its own technician (should reject)
    "maintenance_company": 3  # Invalid maintenance company, should be taken from elevator (should reject)
}

###

### Scenario 6: Providing Technician and Maintenance Company, but Elevator has Null Values
POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/create/elevator/12/  # Elevator with no technician and no maintenance company
Content-Type: application/json

{
    "next_schedule": "1_month",
    "scheduled_date": "2025-01-12",
    "description": "Monthly Maintenance"
}

###


### Scenario 1: Filter by Maintenance Company (ID 2) where technician is null
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/null_technician/
Content-Type: application/json

{
    "maintenance_company_id": 2
}

###

### Scenario 2: Filter by Building (ID 5) where technician is null
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/null_technician/
Content-Type: application/json

{
    "building_id": 5
}

###

### Scenario 3: Filter by Developer (ID 3) where technician is null
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/null_technician/
Content-Type: application/json

{
    "developer_id": 3
}

###

### Scenario 4: Filter by Maintenance Company and Developer where technician is null
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/null_technician/
Content-Type: application/json

{
    "maintenance_company_id": 1,
    "developer_id": 2
}

###

### Scenario 5: Filter by Scheduled Date (2025-01-12) where technician is null
PUT http://127.0.0.1:8000/api/jobs/maintenance-schedule/null_technician/
Content-Type: application/json

{
    "scheduled_date": "2025-01-12"
}


### POST /api/maintenance-schedule/{schedule_id}/file_maintenance_log/ ###
# Test to file an elevator condition and maintenance log for a specific maintenance schedule.
# This POST request handles both regular and ad-hoc maintenance schedules and marks the schedule as completed.

POST http://127.0.0.1:8000/api/maintenance-schedule/1/file_maintenance_log/
Content-Type: application/json

{
  "schedule_type": "regular",
  "condition_report": {
    "alarm_bell": "Working fine",
    "noise_during_motion": "No noise",
    "cabin_lights": "All lights operational",
    "position_indicators": "All working",
    "hall_lantern_indicators": "All indicators functional",
    "cabin_flooring": "No damage",
    "additional_comments": "Elevator condition is optimal"
  },
  "maintenance_log": {
    "check_machine_gear": true,
    "check_machine_brake": true,
    "check_controller_connections": true,
    "blow_dust_from_controller": true,
    "clean_machine_room": true,
    "clean_guide_rails": true,
    "observe_operation": true,
    "description": "All maintenance tasks completed successfully.",
    "overseen_by": "John Doe"
  }
}

### Response Example (Success: Regular Schedule) ###
HTTP/1.1 200 OK
Content-Type: application/json

{
  "detail": "Regular maintenance schedule successfully completed."
}

### POST /api/maintenance-schedule/{schedule_id}/file_maintenance_log/ ###
# Test for an ad-hoc maintenance schedule

POST http://127.0.0.1:8000/api/maintenance-schedule/1/file_maintenance_log/
Content-Type: application/json

{
  "schedule_type": "adhoc",
  "condition_report": {
    "components_checked": "Doors, Motor, Safety Brakes",
    "condition": "Doors are slightly misaligned, motor running smoothly, safety brakes functional."
  },
  "maintenance_log": {
    "summary_title": "Door Realignment and Motor Inspection",
    "description": "Realigned elevator doors and inspected the motor for wear. Adjustments were made to improve alignment.",
    "overseen_by": "John Doe"
  }
}

### Response Example (Success: Ad-Hoc Schedule) ###
HTTP/1.1 200 OK
Content-Type: application/json

{
  "detail": "Adhoc maintenance schedule successfully completed."
}

### POST /api/maintenance-schedule/{schedule_id}/file_maintenance_log/ (No Schedule Type) ###
# Test when schedule_type is missing in the request
POST http://127.0.0.1:8000/api/maintenance-schedule/1/file_maintenance_log/
Content-Type: application/json

{
  "condition_report": {
    "alarm_bell": "Working fine",
    "noise_during_motion": "No noise",
    "cabin_lights": "All lights operational"
  },
  "maintenance_log": {
    "description": "All maintenance tasks completed successfully.",
    "overseen_by": "John Doe"
  }
}

### Response Example (Failure: No Schedule Type) ###
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "detail": "Schedule type is required."
}

### POST /api/maintenance-schedule/{schedule_id}/file_maintenance_log/ (Invalid Schedule Type) ###
# Test with an invalid schedule type
POST http://127.0.0.1:8000/api/maintenance-schedule/1/file_maintenance_log/
Content-Type: application/json

{
  "schedule_type": "invalid",
  "condition_report": {
    "alarm_bell": "Working fine"
  },
  "maintenance_log": {
    "description": "Tasks completed.",
    "overseen_by": "John Doe"
  }
}

### Response Example (Failure: Invalid Schedule Type) ###
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "detail": "Invalid schedule type."
}

### POST /api/maintenance-schedule/{schedule_id}/file_maintenance_log/ (Schedule Not Found) ###
# Test when the schedule ID does not exist
POST http://127.0.0.1:8000/api/maintenance-schedule/999/file_maintenance_log/
Content-Type: application/json

{
  "schedule_type": "regular",
  "condition_report": {
    "alarm_bell": "Working fine"
  },
  "maintenance_log": {
    "description": "Tasks completed.",
    "overseen_by": "John Doe"
  }
}

### Response Example (Failure: Schedule Not Found) ###
HTTP/1.1 404 Not Found
Content-Type: application/json

{
  "detail": "Maintenance schedule not found."
}

### POST /api/maintenance-schedule/{schedule_id}/file_maintenance_log/ (No Technician Assigned) ###
# Test when no technician is assigned
POST http://127.0.0.1:8000/api/maintenance-schedule/1/file_maintenance_log/
Content-Type: application/json

{
  "schedule_type": "regular",
  "condition_report": {
    "alarm_bell": "Working fine"
  },
  "maintenance_log": {
    "description": "Tasks completed.",
    "overseen_by": "John Doe"
  }
}

### Response Example (Failure: No Technician Assigned) ###
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "detail": "This maintenance schedule cannot be completed as no technician has been assigned."
}

### POST /api/maintenance-schedule/{schedule_id}/file_maintenance_log/ (Missing Condition Report) ###
POST http://127.0.0.1:8000/api/maintenance-schedule/1/file_maintenance_log/
Content-Type: application/json

{
  "schedule_type": "regular",
  "maintenance_log": {
    "description": "Tasks completed.",
    "overseen_by": "John Doe"
  }
}

### Response Example (Failure: Missing Condition Report) ###
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "detail": "Condition report data is required."
}


### Change Technician for Maintenance Schedule (Regular or Ad-Hoc)
# Replace `base_url` with the actual base URL of your API server
@base_url = http://127.0.0.1:8000/api/jobs

### Change Technician for Regular Schedule
PUT {{base_url}}/maintenance-schedule/change_technician/regular/1/
Content-Type: application/json

{
  "technician_id": 10
}

### Change Technician for Ad-Hoc Schedule
PUT {{base_url}}/maintenance-schedule/change_technician/adhoc/1/
Content-Type: application/json

{
  "technician_id": 15
}

### Possible Inputs:
# 1. `schedule_type` (str) - The type of schedule: `regular` or `adhoc`.
# 2. `schedule_id` (int) - The ID of the schedule to update. Replace `{{schedule_id}}` with the actual schedule ID.
# 3. `technician_id` (int) - The ID of the technician to assign to the schedule. Replace `10` or `15` with the actual technician ID.

### Possible Responses:

#### 200 OK
# Technician successfully changed.
{
  "message": "Technician has been changed to John Doe."
}

#### 400 Bad Request
# Example reasons:
# - Invalid schedule type.
# - Technician ID not provided.
# - Technician does not belong to the same maintenance company.
{
  "detail": "Technician ID must be provided."
}

#### 404 Not Found
# Example reasons:
# - Schedule not found.
# - Technician not found.
{
  "detail": "Maintenance schedule not found."
}


### GET - Upcoming Jobs for Technician ID 1
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/technician/1/upcoming_jobs/ HTTP/1.1
Accept: application/json

###

### Expected Response for Upcoming Jobs
HTTP/1.1 200 OK
Content-Type: application/json

{
  "regular_schedules": [
    {
      "id": 1,
      "schedule_type": "normal",
      "elevator": 101,
      "technician": 1,
      "technician_full_name": "John Doe",
      "maintenance_company": 5,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-20T10:00:00Z",
      "description": "Scheduled maintenance check",
      "status": "scheduled",
      "building": {"id": 10, "name": "Building A"},
      "developer": {"id": 2, "name": "ABC Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ],
  "adhoc_schedules": [
    {
      "id": 101,
      "schedule_type": "adhoc",
      "elevator": 201,
      "technician": 1,
      "technician_full_name": "John Doe",
      "maintenance_company": 5,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-20T14:00:00Z",
      "description": "Ad-hoc maintenance repair",
      "status": "scheduled",
      "building": {"id": 20, "name": "Building B"},
      "developer": {"id": 3, "name": "XYZ Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ]
}

###

### GET - Overdue Jobs for Technician ID 1
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/technician/1/overdue_jobs/ HTTP/1.1
Accept: application/json

###

### Expected Response for Overdue Jobs
HTTP/1.1 200 OK
Content-Type: application/json

{
  "regular_schedules": [
    {
      "id": 2,
      "schedule_type": "normal",
      "elevator": 102,
      "technician": 1,
      "technician_full_name": "John Doe",
      "maintenance_company": 5,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-10T10:00:00Z",
      "description": "Overdue scheduled maintenance",
      "status": "overdue",
      "building": {"id": 10, "name": "Building A"},
      "developer": {"id": 2, "name": "ABC Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ],
  "adhoc_schedules": [
    {
      "id": 102,
      "schedule_type": "adhoc",
      "elevator": 202,
      "technician": 1,
      "technician_full_name": "John Doe",
      "maintenance_company": 5,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-10T14:00:00Z",
      "description": "Overdue ad-hoc repair",
      "status": "overdue",
      "building": {"id": 20, "name": "Building B"},
      "developer": {"id": 3, "name": "XYZ Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ]
}

###

### GET - Completed Jobs for Technician ID 1
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/technician/1/completed_jobs/ HTTP/1.1
Accept: application/json

###

### Expected Response for Completed Jobs
HTTP/1.1 200 OK
Content-Type: application/json

{
  "regular_schedules": [
    {
      "id": 3,
      "schedule_type": "normal",
      "elevator": 103,
      "technician": 1,
      "technician_full_name": "John Doe",
      "maintenance_company": 5,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-05T10:00:00Z",
      "description": "Completed scheduled maintenance",
      "status": "completed",
      "building": {"id": 10, "name": "Building A"},
      "developer": {"id": 2, "name": "ABC Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ],
  "adhoc_schedules": [
    {
      "id": 103,
      "schedule_type": "adhoc",
      "elevator": 203,
      "technician": 1,
      "technician_full_name": "John Doe",
      "maintenance_company": 5,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-05T14:00:00Z",
      "description": "Completed ad-hoc repair",
      "status": "completed",
      "building": {"id": 20, "name": "Building B"},
      "developer": {"id": 3, "name": "XYZ Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ]
}

###

### GET - Invalid Job Status ("invalid_status") for Technician ID 1
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/technician/1/invalid_status/ HTTP/1.1
Accept: application/json

###

### Expected Error Response for Invalid Job Status
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "detail": "Invalid job_status provided. Valid options are 'upcoming_jobs', 'overdue_jobs', and 'completed_jobs'."
}

###

### GET - Technician Not Found
GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/technician/9999/upcoming_jobs/ HTTP/1.1
Accept: application/json

###

### Expected Error Response for Technician Not Found
HTTP/1.1 404 Not Found
Content-Type: application/json

{
  "detail": "Technician with ID 9999 not found."
}


### 1. GET Upcoming Jobs for Maintenance Company with ID 1

GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/1/upcoming_jobs/ HTTP/1.1
Accept: application/json

### Expected Response: Success (200 OK)
HTTP/1.1 200 OK
Content-Type: application/json

{
  "regular_schedules": [
    {
      "id": 1,
      "schedule_type": "normal",
      "elevator": 101,
      "technician": 1,
      "maintenance_company": 1,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-20T10:00:00Z",
      "description": "Scheduled maintenance check",
      "status": "scheduled",
      "building": {"id": 10, "name": "Building A"},
      "developer": {"id": 2, "name": "ABC Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ],
  "adhoc_schedules": [
    {
      "id": 101,
      "schedule_type": "adhoc",
      "elevator": 201,
      "technician": 1,
      "maintenance_company": 1,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-20T14:00:00Z",
      "description": "Ad-hoc maintenance repair",
      "status": "scheduled",
      "building": {"id": 20, "name": "Building B"},
      "developer": {"id": 3, "name": "XYZ Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ]
}

### 2. GET Overdue Jobs for Maintenance Company with ID 1

GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/1/overdue_jobs/ HTTP/1.1
Accept: application/json

### Expected Response: Success (200 OK)
HTTP/1.1 200 OK
Content-Type: application/json

{
  "regular_schedules": [
    {
      "id": 2,
      "schedule_type": "normal",
      "elevator": 102,
      "technician": 1,
      "maintenance_company": 1,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-10T10:00:00Z",
      "description": "Overdue scheduled maintenance",
      "status": "overdue",
      "building": {"id": 10, "name": "Building A"},
      "developer": {"id": 2, "name": "ABC Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ],
  "adhoc_schedules": [
    {
      "id": 102,
      "schedule_type": "adhoc",
      "elevator": 202,
      "technician": 1,
      "maintenance_company": 1,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-10T14:00:00Z",
      "description": "Overdue ad-hoc repair",
      "status": "overdue",
      "building": {"id": 20, "name": "Building B"},
      "developer": {"id": 3, "name": "XYZ Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ]
}

### 3. GET Completed Jobs for Maintenance Company with ID 1

GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/1/completed_jobs/ HTTP/1.1
Accept: application/json

### Expected Response: Success (200 OK)
HTTP/1.1 200 OK
Content-Type: application/json

{
  "regular_schedules": [
    {
      "id": 3,
      "schedule_type": "normal",
      "elevator": 103,
      "technician": 1,
      "maintenance_company": 1,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-05T10:00:00Z",
      "description": "Completed scheduled maintenance",
      "status": "completed",
      "building": {"id": 10, "name": "Building A"},
      "developer": {"id": 2, "name": "ABC Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ],
  "adhoc_schedules": [
    {
      "id": 103,
      "schedule_type": "adhoc",
      "elevator": 203,
      "technician": 1,
      "maintenance_company": 1,
      "maintenance_company_name": "Elevator Maint Co.",
      "scheduled_date": "2025-01-05T14:00:00Z",
      "description": "Completed ad-hoc repair",
      "status": "completed",
      "building": {"id": 20, "name": "Building B"},
      "developer": {"id": 3, "name": "XYZ Developers"},
      "condition_report": [],
      "maintenance_log": []
    }
  ]
}

### 4. GET Invalid Job Status for Maintenance Company with ID 1

GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/1/invalid_status/ HTTP/1.1
Accept: application/json

### Expected Response: Bad Request (400)
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
  "detail": "Invalid job_status provided. Valid options are 'upcoming_jobs', 'overdue_jobs', and 'completed_jobs'."
}

### 5. GET Upcoming Jobs for Maintenance Company with ID 999 (Non-Existing Company)

GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/999/upcoming_jobs/ HTTP/1.1
Accept: application/json

### Expected Response: Not Found (404)
HTTP/1.1 404 Not Found
Content-Type: application/json

{
  "detail": "Maintenance company with ID 999 not found."
}

### 6. GET Overdue Jobs for Maintenance Company with ID 999 (Non-Existing Company)

GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/999/overdue_jobs/ HTTP/1.1
Accept: application/json

### Expected Response: Not Found (404)
HTTP/1.1 404 Not Found
Content-Type: application/json

{
  "detail": "Maintenance company with ID 999 not found."
}

### 7. GET Completed Jobs for Maintenance Company with ID 999 (Non-Existing Company)

GET http://127.0.0.1:8000/api/jobs/maintenance-schedule/maintenance_company/999/completed_jobs/ HTTP/1.1
Accept: application/json

### Expected Response: Not Found (404)
HTTP/1.1 404 Not Found
Content-Type: application/json

{
  "detail": "Maintenance company with ID 999 not found."
}


### 1. Create Building Ad-hoc Maintenance Schedule - Success (Minimal Input: Description Only)
POST http://yourdomain.com/jobs/maintenance-schedule/building/1/create_building_adhoc
Content-Type: application/json

{
    "description": "Emergency maintenance required."
}

# Expected Response:
HTTP/1.1 201 Created
Content-Type: application/json

{
    "id": 1,
    "building": {
        "id": 1,
        "name": "Sundowners Towers"
    },
    "technician": {
        "id": 1,
        "full_name": "Charlie Brown"
    },
    "maintenance_company": {
        "id": 1,
        "company_name": "Johnson Elevators Co."
    },
    "description": "Emergency maintenance required.",
    "scheduled_date": "2025-01-19T00:00:00Z",
    "status": "scheduled"
}

### 2. Create Building Ad-hoc Maintenance Schedule - Success (Full Input with Building, Technician, Maintenance Company, Date, and Status)
POST http://yourdomain.com/jobs/maintenance-schedule/building/1/create_building_adhoc
Content-Type: application/json

{
    "building": 1,
    "technician": 2,
    "maintenance_company": 3,
    "scheduled_date": "2025-01-16T10:30:00Z",
    "description": "Emergency maintenance required.",
    "status": "scheduled"
}

# Expected Response:
HTTP/1.1 201 Created
Content-Type: application/json

{
    "id": 2,
    "building": {
        "id": 1,
        "name": "Sundowners Towers"
    },
    "technician": {
        "id": 2,
        "full_name": "Jane Smith"
    },
    "maintenance_company": {
        "id": 3,
        "company_name": "Elevator Solutions"
    },
    "description": "Emergency maintenance required.",
    "scheduled_date": "2025-01-16T10:30:00Z",
    "status": "scheduled"
}

### 3. Create Building Ad-hoc Maintenance Schedule - Missing Description (Error Case)
POST http://yourdomain.com/jobs/maintenance-schedule/building/1/create_building_adhoc
Content-Type: application/json

{
    "description": ""
}

# Expected Response:
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
    "detail": "Description is required."
}

### 4. Create Building Ad-hoc Maintenance Schedule - Non-Existent Building (Error Case)
POST http://yourdomain.com/jobs/maintenance-schedule/building/999/create_building_adhoc
Content-Type: application/json

{
    "description": "Emergency maintenance required."
}

# Expected Response:
HTTP/1.1 404 Not Found
Content-Type: application/json

{
    "detail": "Building with ID 999 not found."
}

### 5. Create Building Ad-hoc Maintenance Schedule - No Elevators in Building (Error Case)
POST http://yourdomain.com/jobs/maintenance-schedule/building/2/create_building_adhoc
Content-Type: application/json

{
    "description": "Emergency maintenance required."
}

# Expected Response:
HTTP/1.1 404 Not Found
Content-Type: application/json

{
    "detail": "No elevators found for Building with ID 2."
}

### 6. Create Building Ad-hoc Maintenance Schedule - Elevator Without Technician (Error Case)
POST http://yourdomain.com/jobs/maintenance-schedule/building/1/create_building_adhoc
Content-Type: application/json

{
    "description": "Emergency maintenance required."
}

# Expected Response:
HTTP/1.1 404 Not Found
Content-Type: application/json

{
    "detail": "No technician assigned to Elevator with ID 1."
}

### 7. Create Building Ad-hoc Maintenance Schedule - Elevator Without Maintenance Company (Error Case)
POST http://yourdomain.com/jobs/maintenance-schedule/building/1/create_building_adhoc
Content-Type: application/json

{
    "description": "Emergency maintenance required."
}

# Expected Response:
HTTP/1.1 404 Not Found
Content-Type: application/json

{
    "detail": "No maintenance company assigned to Elevator with ID 1."
}


### CompleteBuildingScheduleView API Test (.http File) ###
# This section is for testing the CompleteBuildingScheduleView API endpoint.
# The endpoint is responsible for completing the building-level maintenance schedule by generating
# Ad-Hoc Maintenance Schedules for elevators, and creating Condition Reports and Maintenance Logs.

# The request below simulates a POST request to complete the building maintenance schedule for elevators.
# It includes the elevator information for processing, such as condition reports and maintenance logs.

POST http://127.0.0.1:8000/api/jobs/maintenance-schedule/13/complete_building_adhoc/ 
Content-Type: application/json

{
  "elevators": [
    {
      "elevator_id": 1,  # The ID of the elevator to be processed.
      "condition_report": {
        "components_checked": "Doors, Motor, Safety Brakes",  # List of elevator components inspected.
        "condition": "Doors are slightly misaligned, motor running smoothly, safety brakes functional."  # Condition of the components checked.
      },
      "maintenance_log": {
        "summary_title": "Door Realignment and Motor Inspection",  # Summary title of the maintenance performed.
        "description": "Realigned elevator doors and inspected the motor for wear. Adjustments were made to improve alignment.",  # Detailed description of the maintenance performed.
        "overseen_by": "John Doe"  # The technician overseeing the maintenance.
      }
    },
    {
      "elevator_id": 2,  # Another elevator to be processed.
      "condition_report": {
        "components_checked": "Cabin, Safety Brakes",  # Components checked during this maintenance.
        "condition": "Cabin is slightly scratched, safety brakes functional."  # Condition of these components.
      },
      "maintenance_log": {
        "summary_title": "Cabin Maintenance and Safety Brake Inspection",  # Summary title of this maintenance task.
        "description": "Cleaned and repaired cabin scratches and tested the safety brakes.",  # Detailed description of the work performed.
        "overseen_by": "Jane Smith"  # Name of the technician who supervised the work.
      }
    }
  ]
}

### Explanation of the View's Functionality and Responses ###

# 1. **Checking if the Building Schedule is Completed**:
#    The API first checks whether the building-level maintenance schedule (with ID `building_schedule_id` passed in the URL) has already been completed.
#    If the schedule is already marked as `completed`, the API will return a message like:
#    ```json
#    {
#      "message": "This building schedule has already been marked as completed."
#    }
#    ```
#    If this is the case, no further action is taken, and the API terminates the process.

# 2. **Validating Elevators**:
#    - The API checks if each elevator provided in the request belongs to the building associated with the current building-level maintenance schedule.
#    - If an elevator does **not** belong to the building, the process terminates immediately, and the API will return a response with a message like:
#    ```json
#    {
#      "message": "Elevator LIFT3 does not belong to the building associated with this schedule. Please check the elevator assignments.",
#      "failed_elevators": ["LIFT3"]
#    }
#    ```
#    - The API will **not** proceed with creating Ad-Hoc Maintenance Schedules, Condition Reports, or Maintenance Logs for any invalid elevators.

# 3. **Creating Ad-Hoc Maintenance Schedules**:
#    - If an elevator is valid and belongs to the building, the API will create an `AdHocMaintenanceSchedule` for that elevator using the data from the building-level schedule.
#    - The description for the maintenance schedule will be system-generated and will reference the building schedule date and purpose.
#    - Example description format:
#    ```
#    A system-generated schedule based on the building schedule of {scheduled_date} whose intention was to {building_schedule.description}.
#    ```
#    - Once the schedule is created, the status of the Ad-Hoc Maintenance Schedule is set to `completed`.

# 4. **Creating Condition Reports and Maintenance Logs**:
#    - After creating the Ad-Hoc Maintenance Schedule, the API will create a `ConditionReport` and a `MaintenanceLog` for each valid elevator.
#    - The `ConditionReport` will capture the elevator's inspected components and their condition.
#    - The `MaintenanceLog` will include the summary of work, a description of the tasks performed, and the technician's oversight information.

# 5. **Completing the Building Schedule**:
#    - After processing all valid elevators, the API will mark the building-level maintenance schedule as `completed`.

# 6. **Final Response**:
#    If the operation is successful, the API will return a response like:
#    ```json
#    {
#      "message": "2 elevators (LIFT1, LIFT2) were successfully checked during this building schedule and their condition reports and maintenance logs were generated and recorded.",
#      "failed_elevators": []
#    }
#    ```
#    This indicates that two elevators were processed successfully, and their reports and logs were created.

#    If there are any failed elevators (e.g., invalid elevators, missing data), the response would look like this:
#    ```json
#    {
#      "message": "The elevator_id '5' is missing the condition_report or maintenance_log data. Please provide the required fields.",
#      "failed_elevators": ["LIFT5"]
#    }
#    ```
#    This message would indicate the missing data for the elevator with ID '5', and the process would not continue for this elevator.

# 7. **Failure Scenarios**:
#    The following are potential failure scenarios:
#    - **Building Schedule Already Completed**:
#      If the building-level schedule has already been marked as `completed`, no further action will be performed, and the response will indicate that:
#      ```json
#      {
#        "message": "This building schedule has already been marked as completed."
#      }
#      ```
#    - **Elevator Not Assigned to Building**:
#      If an elevator does not belong to the building associated with the schedule, the response will look like:
#      ```json
#      {
#        "message": "Elevator LIFT3 does not belong to the building associated with this schedule. Please check the elevator assignments.",
#        "failed_elevators": ["LIFT3"]
#      }
#      ```
#    - **Missing or Invalid Data**:
#      If the request body is missing required fields (e.g., `condition_report` or `maintenance_log`), the response will indicate which elevators failed due to missing data:
#      ```json
#      {
#        "message": "The elevator_id '5' is missing the condition_report or maintenance_log data. Please provide the required fields.",
#        "failed_elevators": ["LIFT5"]
#      }
#      ```

### Response Summary:

- **Success**: A list of successfully processed elevators and a message indicating that their condition reports and maintenance logs were generated.
- **Failure (Building Schedule Already Completed)**: A message indicating the building schedule is already completed.
- **Failure (Elevator Not Assigned)**: A message indicating which elevator(s) don't belong to the building, with a list of failed elevators.
- **Failure (Missing or Invalid Input)**: A message indicating which elevator(s) are missing required data, with a list of failed elevators.

# End of Test Case for CompleteBuildingScheduleView API
