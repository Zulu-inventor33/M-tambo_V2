# This file is for testing the registration of buildings and listing all buildings via API.
# The following two endpoints will be tested:
# 1. POST /api/buildings/add/ - Register a new building (with a trailing slash)
# 2. GET /api/buildings/ - List all buildings (with a trailing slash)


### Registering Buildings

# Building 1 - Sunset Towers by Developer 1
POST http://localhost:8000/api/buildings/add/ HTTP/1.1
Content-Type: application/json

{
    "developer_id": 1,
    "name": "Sundowners Towers",
    "address": "123 Sunset Boulevard, Los Angeles, CA",
    "contact": "555-12544"
}


### Building 2 - Sunset Heights by Developer 1
POST http://localhost:8000/api/buildings/add/ HTTP/1.1
Content-Type: application/json

{
    "developer_id": 1,
    "name": "Sunset Heights",
    "address": "456 Sunset Blvd, Los Angeles, CA",
    "contact": "555-5678"
}


### Building 3 - Ocean View Apartments by Developer 2
POST http://localhost:8000/api/buildings/add/ HTTP/1.1
Content-Type: application/json

{
    "developer_id": 2,
    "name": "Ocean View Apartments",
    "address": "789 Ocean Drive, Miami, FL",
    "contact": "555-8765"
}


### Building 4 - Beachfront Condos by Developer 2
POST http://localhost:8000/api/buildings/add/ HTTP/1.1
Content-Type: application/json

{
    "developer_id": 2,
    "name": "Beachfront Condos",
    "address": "321 Beach Avenue, Miami, FL",
    "contact": "555-4321"
}


### List All Registered Buildings

GET http://localhost:8000/api/buildings/ HTTP/1.1
Content-Type: application/json


### Test 1: Fetch details of an existing building
# This test will query an existing building with id=1.

GET http://127.0.0.1:8000/api/buildings/1/ HTTP/1.1
Content-Type: application/json

### Expected Response:
# The response should contain the details of the building with id=1 if it exists in the database.
# You should expect a 200 OK response with the building details as JSON, like:
#
# {
#     "id": 1,
#     "name": "Sunset Towers",
#     "address": "123 Sunset Boulevard, Los Angeles, CA",
#     "contact": "555-1234",
#     "developer": 1,
#     "developer_name": "Developer Name"
# }

### Test 2: Fetch details of a non-existing building
# This test will query a building that does not exist, with id=999.

GET http://127.0.0.1:8000/api/buildings/999/ HTTP/1.1
Content-Type: application/json

### Expected Response:
# Since there is no building with id=999, the response should return a 404 Not Found status code.
# The response body will contain an error message indicating that the building was not found, like:
#
# {
#     "error": "Building not found."
# }

### Test 3: Fetch details of another existing building
# This test will query an existing building with id=2.

GET http://127.0.0.1:8000/api/buildings/2/ HTTP/1.1
Content-Type: application/json

### Expected Response:
# You should receive a 200 OK response with the details of the building with id=2, such as:
#
# {
#     "id": 2,
#     "name": "Mountain View Apartments",
#     "address": "456 Mountain Road, San Francisco, CA",
#     "contact": "555-6789",
#     "developer": 2,
#     "developer_name": "Mountain Builders"
# }

### Test Case 1: Successfully retrieve buildings for a developer
# Test for valid developer ID (e.g., developer_id = 1)

GET http://127.0.0.1:8000/api/buildings/developer/1/ HTTP/1.1
Accept: application/json

### Test Case 2: No buildings found for a developer
# Test for developer ID that has no associated buildings (e.g., developer_id = 9999)

GET http://127.0.0.1:8000/api/buildings/developer/9999/ HTTP/1.1
Accept: application/json
### Building API

# 1. List all buildings
GET http://localhost:8000/api/buildings/ HTTP/1.1
Host: localhost:8000
Authorization: Bearer <your_token_here>
Response:
HTTP/1.1 200 OK
Content-Type: application/json
[
  {
    "id": 1,
    "name": "Sky Tower",
    "developer": 2,
    "developer_name": "Dev Corp",
    "location": "Downtown",
    "floors": 50,
    "completion_date": "2025-08-01"
  },
  {
    "id": 2,
    "name": "Sunset Heights",
    "developer": 3,
    "developer_name": "Urban Builders",
    "location": "Uptown",
    "floors": 40,
    "completion_date": "2024-12-01"
  }
]

# 2. Add a new building
POST http://localhost:8000/api/buildings/add/ HTTP/1.1
Host: localhost:8000
Authorization: Bearer <your_token_here>
Content-Type: application/json
{
  "developer_id": 2,
  "name": "Ocean View",
  "location": "Beachfront",
  "floors": 25,
  "completion_date": "2026-03-01"
}
Response:
HTTP/1.1 201 Created
Content-Type: application/json
{
  "id": 3,
  "name": "Ocean View",
  "developer": 2,
  "developer_name": "Dev Corp",
  "location": "Beachfront",
  "floors": 25,
  "completion_date": "2026-03-01"
}

# 3. Get details of a specific building by ID
GET http://localhost:8000/api/buildings/1/ HTTP/1.1
Host: localhost:8000
Authorization: Bearer <your_token_here>
Response:
HTTP/1.1 200 OK
Content-Type: application/json
{
  "id": 1,
  "name": "Sky Tower",
  "developer": 2,
  "developer_name": "Dev Corp",
  "location": "Downtown",
  "floors": 50,
  "completion_date": "2025-08-01"
}
---
# 4. Get all buildings for a specific developer
GET http://localhost:8000/api/buildings/developer/2/ HTTP/1.1
Host: localhost:8000
Authorization: Bearer <your_token_here>
Response:
HTTP/1.1 200 OK
Content-Type: application/json
[
  {
    "id": 1,
    "name": "Sky Tower",
    "developer": 2,
    "developer_name": "Dev Corp",
    "location": "Downtown",
    "floors": 50,
    "completion_date": "2025-08-01"
  },
  {
    "id": 3,
    "name": "Ocean View",
    "developer": 2,
    "developer_name": "Dev Corp",
    "location": "Beachfront",
    "floors": 25,
    "completion_date": "2026-03-01"
  }
]
---
# 5. Get all jobs for a building (by job status)
GET http://localhost:8000/api/buildings/1/jobs/ HTTP/1.1
Host: localhost:8000
Authorization: Bearer <your_token_here>
Response:
HTTP/1.1 200 OK
Content-Type: application/json
[
  {
    "job_id": 1,
    "status": "In Progress",
    "description": "Elevator installation",
    "assigned_to": "John Doe",
    "start_date": "2024-05-01"
  },
  {
    "job_id": 2,
    "status": "Completed",
    "description": "Plumbing installation",
    "assigned_to": "Jane Smith",
    "start_date": "2023-11-01"
  }
]
---
# 6. Get all elevators in a specific building
GET http://localhost:8000/api/buildings/1/elevators/ HTTP/1.1
Host: localhost:8000
Authorization: Bearer <your_token_here>
Response:
HTTP/1.1 200 OK
Content-Type: application/json
[
  {
    "id": 1,
    "machine_number": "A123",
    "building": 1,
    "floor_count": 10,
    "capacity": 1000,
    "installation_date": "2023-01-01"
  },
  {
    "id": 2,
    "machine_number": "B456",
    "building": 1,
    "floor_count": 15,
    "capacity": 1500,
    "installation_date": "2022-05-01"
  }
]
---
# 7. Get specific elevator job history and issues for a building
GET http://localhost:8000/api/buildings/1/elevators/1/ HTTP/1.1
Host: localhost:8000
Authorization: Bearer <your_token_here>
Response:
HTTP/1.1 200 OK
Content-Type: application/json
{
  "id": 1,
  "machine_number": "A123",
  "building": 1,
  "floor_count": 10,
  "capacity": 1000,
  "installation_date": "2023-01-01",
  "job_history": [
    {
      "job_id": 1,
      "status": "In Progress",
      "description": "Elevator installation",
      "assigned_to": "John Doe",
      "start_date": "2024-05-01"
    },
    {
      "job_id": 2,
      "status": "Completed",
      "description": "Elevator maintenance",
      "assigned_to": "Jane Smith",
      "start_date": "2023-12-15"
    }
  ],
  "issues": [
    {
      "issue_id": 1,
      "description": "Overheating issue in elevator motor",
      "reported_by": "John Doe",
      "date_reported": "2023-06-15"
    }
  ]
}
---
