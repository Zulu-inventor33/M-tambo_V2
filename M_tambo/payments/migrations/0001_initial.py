# Generated by Django 5.1.3 on 2025-01-31 03:25

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('brokers', '0006_alter_brokerreferral_maintenance_company'),
        ('elevators', '0003_alter_elevatorissuelog_developer'),
        ('maintenance_companies', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BrokerBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Total earnings over time.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('expected_monthly_earnings', models.DecimalField(decimal_places=2, default=0.0, help_text='Expected earnings for the current month.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('withdrawable_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount available for withdrawal.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the balance was last updated.')),
                ('broker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='brokers.brokeruser')),
            ],
            options={
                'verbose_name': 'Broker Balance',
                'verbose_name_plural': 'Broker Balances',
                'ordering': ['-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='ExpectedPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount due for the month.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('calculation_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when the expected payment was calculated (25th of the month).')),
                ('due_date', models.DateTimeField(help_text='Date by which the payment is due (5th of the next month).')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('overdue', 'Overdue')], default='pending', help_text='Payment status (pending, paid, overdue).', max_length=20)),
                ('payment_date', models.DateTimeField(blank=True, help_text='Date when the payment was made (if paid).', null=True)),
                ('assets', models.ManyToManyField(help_text='List of assets (elevators) being charged.', related_name='expected_payments', to='elevators.elevator')),
                ('maintenance_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expected_payments', to='maintenance_companies.maintenancecompanyprofile')),
            ],
            options={
                'verbose_name': 'Expected Payment',
                'verbose_name_plural': 'Expected Payments',
                'ordering': ['-calculation_date'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total amount paid.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('payment_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the payment was made.')),
                ('transaction_id', models.CharField(help_text='Transaction ID from the payment gateway (e.g., M-PESA).', max_length=100, unique=True)),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-PESA'), ('bank', 'Bank Transfer'), ('other', 'Other')], default='mpesa', help_text='Method used for the payment.', max_length=50)),
                ('is_successful', models.BooleanField(default=True, help_text='Whether the payment was successful.')),
                ('expected_payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='payments.expectedpayment')),
                ('maintenance_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='maintenance_companies.maintenancecompanyprofile')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='PaymentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_per_asset', models.DecimalField(decimal_places=2, default=700.0, help_text='Amount charged per elevator per month (default is Kshs. 700).', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Start date of the payment plan.')),
                ('end_date', models.DateTimeField(blank=True, help_text='End date of the payment plan (if applicable).', null=True)),
                ('maintenance_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_plans', to='maintenance_companies.maintenancecompanyprofile')),
            ],
        ),
        migrations.CreateModel(
            name='RevenueSplit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_revenue', models.DecimalField(decimal_places=2, help_text='Total revenue from the payment.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('broker_commission', models.DecimalField(decimal_places=2, help_text='Amount paid to the broker as commission.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('company_earnings', models.DecimalField(decimal_places=2, help_text='Amount retained by the platform as earnings.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('split_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the revenue was split.')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revenue_splits', to='payments.payment')),
            ],
            options={
                'verbose_name': 'Revenue Split',
                'verbose_name_plural': 'Revenue Splits',
                'ordering': ['-split_date'],
            },
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount requested for withdrawal.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('request_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the request was made.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='Status of the withdrawal request.', max_length=20)),
                ('broker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_requests', to='brokers.brokeruser')),
            ],
            options={
                'verbose_name': 'Withdrawal Request',
                'verbose_name_plural': 'Withdrawal Requests',
                'ordering': ['-request_date'],
            },
        ),
    ]
